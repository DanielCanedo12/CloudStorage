/* Mustache */
(function defineMustache(global, factory) { if (typeof exports === "object" && exports && typeof exports.nodeName !== "string") { factory(exports) } else if (typeof define === "function" && define.amd) { define(["exports"], factory) } else { global.Mustache = {}; factory(Mustache) } })(this, function mustacheFactory(mustache) { var objectToString = Object.prototype.toString; var isArray = Array.isArray || function isArrayPolyfill(object) { return objectToString.call(object) === "[object Array]" }; function isFunction(object) { return typeof object === "function" } function typeStr(obj) { return isArray(obj) ? "array" : typeof obj } function escapeRegExp(string) { return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&") } function hasProperty(obj, propName) { return obj != null && typeof obj === "object" && propName in obj } var regExpTest = RegExp.prototype.test; function testRegExp(re, string) { return regExpTest.call(re, string) } var nonSpaceRe = /\S/; function isWhitespace(string) { return !testRegExp(nonSpaceRe, string) } var entityMap = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;", "/": "&#x2F;" }; function escapeHtml(string) { return String(string).replace(/[&<>"'\/]/g, function fromEntityMap(s) { return entityMap[s] }) } var whiteRe = /\s*/; var spaceRe = /\s+/; var equalsRe = /\s*=/; var curlyRe = /\s*\}/; var tagRe = /#|\^|\/|>|\{|&|=|!/; function parseTemplate(template, tags) { if (!template) return []; var sections = []; var tokens = []; var spaces = []; var hasTag = false; var nonSpace = false; function stripSpace() { if (hasTag && !nonSpace) { while (spaces.length) delete tokens[spaces.pop()] } else { spaces = [] } hasTag = false; nonSpace = false } var openingTagRe, closingTagRe, closingCurlyRe; function compileTags(tagsToCompile) { if (typeof tagsToCompile === "string") tagsToCompile = tagsToCompile.split(spaceRe, 2); if (!isArray(tagsToCompile) || tagsToCompile.length !== 2) throw new Error("Invalid tags: " + tagsToCompile); openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + "\\s*"); closingTagRe = new RegExp("\\s*" + escapeRegExp(tagsToCompile[1])); closingCurlyRe = new RegExp("\\s*" + escapeRegExp("}" + tagsToCompile[1])) } compileTags(tags || mustache.tags); var scanner = new Scanner(template); var start, type, value, chr, token, openSection; while (!scanner.eos()) { start = scanner.pos; value = scanner.scanUntil(openingTagRe); if (value) { for (var i = 0, valueLength = value.length; i < valueLength; ++i) { chr = value.charAt(i); if (isWhitespace(chr)) { spaces.push(tokens.length) } else { nonSpace = true } tokens.push(["text", chr, start, start + 1]); start += 1; if (chr === "\n") stripSpace() } } if (!scanner.scan(openingTagRe)) break; hasTag = true; type = scanner.scan(tagRe) || "name"; scanner.scan(whiteRe); if (type === "=") { value = scanner.scanUntil(equalsRe); scanner.scan(equalsRe); scanner.scanUntil(closingTagRe) } else if (type === "{") { value = scanner.scanUntil(closingCurlyRe); scanner.scan(curlyRe); scanner.scanUntil(closingTagRe); type = "&" } else { value = scanner.scanUntil(closingTagRe) } if (!scanner.scan(closingTagRe)) throw new Error("Unclosed tag at " + scanner.pos); token = [type, value, start, scanner.pos]; tokens.push(token); if (type === "#" || type === "^") { sections.push(token) } else if (type === "/") { openSection = sections.pop(); if (!openSection) throw new Error('Unopened section "' + value + '" at ' + start); if (openSection[1] !== value) throw new Error('Unclosed section "' + openSection[1] + '" at ' + start) } else if (type === "name" || type === "{" || type === "&") { nonSpace = true } else if (type === "=") { compileTags(value) } } openSection = sections.pop(); if (openSection) throw new Error('Unclosed section "' + openSection[1] + '" at ' + scanner.pos); return nestTokens(squashTokens(tokens)) } function squashTokens(tokens) { var squashedTokens = []; var token, lastToken; for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) { token = tokens[i]; if (token) { if (token[0] === "text" && lastToken && lastToken[0] === "text") { lastToken[1] += token[1]; lastToken[3] = token[3] } else { squashedTokens.push(token); lastToken = token } } } return squashedTokens } function nestTokens(tokens) { var nestedTokens = []; var collector = nestedTokens; var sections = []; var token, section; for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) { token = tokens[i]; switch (token[0]) { case "#": case "^": collector.push(token); sections.push(token); collector = token[4] = []; break; case "/": section = sections.pop(); section[5] = token[2]; collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens; break; default: collector.push(token) } } return nestedTokens } function Scanner(string) { this.string = string; this.tail = string; this.pos = 0 } Scanner.prototype.eos = function eos() { return this.tail === "" }; Scanner.prototype.scan = function scan(re) { var match = this.tail.match(re); if (!match || match.index !== 0) return ""; var string = match[0]; this.tail = this.tail.substring(string.length); this.pos += string.length; return string }; Scanner.prototype.scanUntil = function scanUntil(re) { var index = this.tail.search(re), match; switch (index) { case -1: match = this.tail; this.tail = ""; break; case 0: match = ""; break; default: match = this.tail.substring(0, index); this.tail = this.tail.substring(index) } this.pos += match.length; return match }; function Context(view, parentContext) { this.view = view; this.cache = { ".": this.view }; this.parent = parentContext } Context.prototype.push = function push(view) { return new Context(view, this) }; Context.prototype.lookup = function lookup(name) { var cache = this.cache; var value; if (cache.hasOwnProperty(name)) { value = cache[name] } else { var context = this, names, index, lookupHit = false; while (context) { if (name.indexOf(".") > 0) { value = context.view; names = name.split("."); index = 0; while (value != null && index < names.length) { if (index === names.length - 1) lookupHit = hasProperty(value, names[index]); value = value[names[index++]] } } else { value = context.view[name]; lookupHit = hasProperty(context.view, name) } if (lookupHit) break; context = context.parent } cache[name] = value } if (isFunction(value)) value = value.call(this.view); return value }; function Writer() { this.cache = {} } Writer.prototype.clearCache = function clearCache() { this.cache = {} }; Writer.prototype.parse = function parse(template, tags) { var cache = this.cache; var tokens = cache[template]; if (tokens == null) tokens = cache[template] = parseTemplate(template, tags); return tokens }; Writer.prototype.render = function render(template, view, partials) { var tokens = this.parse(template); var context = view instanceof Context ? view : new Context(view); return this.renderTokens(tokens, context, partials, template) }; Writer.prototype.renderTokens = function renderTokens(tokens, context, partials, originalTemplate) { var buffer = ""; var token, symbol, value; for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) { value = undefined; token = tokens[i]; symbol = token[0]; if (symbol === "#") value = this.renderSection(token, context, partials, originalTemplate); else if (symbol === "^") value = this.renderInverted(token, context, partials, originalTemplate); else if (symbol === ">") value = this.renderPartial(token, context, partials, originalTemplate); else if (symbol === "&") value = this.unescapedValue(token, context); else if (symbol === "name") value = this.escapedValue(token, context); else if (symbol === "text") value = this.rawValue(token); if (value !== undefined) buffer += value } return buffer }; Writer.prototype.renderSection = function renderSection(token, context, partials, originalTemplate) { var self = this; var buffer = ""; var value = context.lookup(token[1]); function subRender(template) { return self.render(template, context, partials) } if (!value) return; if (isArray(value)) { for (var j = 0, valueLength = value.length; j < valueLength; ++j) { buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate) } } else if (typeof value === "object" || typeof value === "string" || typeof value === "number") { buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate) } else if (isFunction(value)) { if (typeof originalTemplate !== "string") throw new Error("Cannot use higher-order sections without the original template"); value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender); if (value != null) buffer += value } else { buffer += this.renderTokens(token[4], context, partials, originalTemplate) } return buffer }; Writer.prototype.renderInverted = function renderInverted(token, context, partials, originalTemplate) { var value = context.lookup(token[1]); if (!value || isArray(value) && value.length === 0) return this.renderTokens(token[4], context, partials, originalTemplate) }; Writer.prototype.renderPartial = function renderPartial(token, context, partials) { if (!partials) return; var value = isFunction(partials) ? partials(token[1]) : partials[token[1]]; if (value != null) return this.renderTokens(this.parse(value), context, partials, value) }; Writer.prototype.unescapedValue = function unescapedValue(token, context) { var value = context.lookup(token[1]); if (value != null) return value }; Writer.prototype.escapedValue = function escapedValue(token, context) { var value = context.lookup(token[1]); if (value != null) return mustache.escape(value) }; Writer.prototype.rawValue = function rawValue(token) { return token[1] }; mustache.name = "mustache.js"; mustache.version = "2.2.0"; mustache.tags = ["{{", "}}"]; var defaultWriter = new Writer; mustache.clearCache = function clearCache() { return defaultWriter.clearCache() }; mustache.parse = function parse(template, tags) { return defaultWriter.parse(template, tags) }; mustache.render = function render(template, view, partials) { if (typeof template !== "string") { throw new TypeError('Invalid template! Template should be a "string" ' + 'but "' + typeStr(template) + '" was given as the first ' + "argument for mustache#render(template, view, partials)") } return defaultWriter.render(template, view, partials) }; mustache.to_html = function to_html(template, view, partials, send) { var result = mustache.render(template, view, partials); if (isFunction(send)) { send(result) } else { return result } }; mustache.escape = escapeHtml; mustache.Scanner = Scanner; mustache.Context = Context; mustache.Writer = Writer });


$.strPad = function(i,l,s) {
    var o = i.toString();
    if (!s) { s = '0'; }
    while (o.length < l) {
        o = s + o;
    }
    return o;
};

/**
* This function tests if the current time is day
* @param time a string
* @return true or false
*/
isDay = function (time) {
    var tmp = time.split(" ");
    var time = tmp[0].split(":");

    if ((tmp[1] == "AM" && parseInt(time[0]) > 5 && parseInt(time[0]) != 12) || (tmp[1] == "PM" && (parseInt(time[0]) < 6 || parseInt(time[0]) == 12))) {
        return true;
    } else {
        return false;
    }
};

/*
 * WhatWeather 1.2, jQuery plugin
 *
 * Copyright(c) 2013, Salman Amakran
 * http://getkode.be/whatweather/
 *
 * WhatWeather provides weather's data and let you manage the display
 *
 * You may use WhatWeather under the terms of the GNU GPL licence
 * http://www.gnu.org/licenses/gpl-3.0.en.html
 */
(function ($) {
    $.fn.extend({
        whatWeather: function (settings) {
            var $this = $(this);

            function WhatWeather(settings) {
                var uuid = new Date().getTime();
                var options = {
                    uuid: uuid,
                    id: "",
                    city: "",
                    days: 1,
                    latitude: 0,
                    longitude: 0,
                    ip: false,
                    geolocation: false,
                    async: true,
                    refresh: 600,
                    cache: false,
                    dayAndNight: false,
                    cssClass: "widget-1",
                    typeTemp: "C",
                    day: "Date",
                    max: "Max",
                    min: "Min",
                    msgError: "Loading error",
                    weekDays: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                    dateFormat: "#dd#/#mm#/#yy#",
                    updateDateFormat: "#DD# #M# #d#, #yy#",
                    templates:
                        '<div class="col-md-2 col-sm-3 col-xs-6 text-center bg-info pv-xl">\
                            <div class="wi fa-4x" data-skycon="#currentWeatherIcon#" data-skycolor="white" data-skywidth="62" data-skyheight="56"></div>\
                        </div>\
                        <div class="col-md-2 col-sm-3 col-xs-6 pv br">\
                            <div class="h1 m0 text-bold">#currentCondition#&ordm;</div>\
                            <div class="text-capitalize">#desc#</div>\
                        </div>',
                    tplNextdays: '\
                        <div class="col-md-2 col-sm-3 hidden-xs pv text-center br">\
                            <div class="text-info text-sm">#hour#</div>\
                            <div class="text-muted text-md">\
                            <div class="wi" data-skycon="#dayWeatherIcon#" data-skycolor="#888" data-skywidth="38" data-skyheight="27" title="#desc#"></div>\
                            </div>\
                            <div class="text-info">\
                            <em class="wi wi-sprinkles"></em>\
                            <span class="text-muted">#humidity#%</span>\
                            </div>\
                            <div class="text-muted">#tempMax#&ordm;</div>\
                        </div>',
                    icons: {
                        day: {
                            'w-395': 'snow',
                            'w-392': 'sleet',
                            'w-389': 'sleet',
                            'w-386': 'sleet',
                            'w-377': 'sleet',
                            'w-374': 'sleet',
                            'w-371': 'partly-cloudy-day',
                            'w-368': 'snow',
                            'w-365': 'sleet',
                            'w-362': 'sleet',
                            'w-359': 'rain',
                            'w-356': 'rain',
                            'w-353': 'sleet',
                            'w-350': 'sleet',
                            'w-338': 'partly-cloudy-day',
                            'w-335': 'partly-cloudy-day',
                            'w-332': 'partly-cloudy-day',
                            'w-329': 'partly-cloudy-day',
                            'w-326': 'snow',
                            'w-323': 'snow',
                            'w-320': 'snow',
                            'w-317': 'partly-cloudy-day',
                            'w-314': 'partly-cloudy-day',
                            'w-311': 'partly-cloudy-day',
                            'w-308': 'rain',
                            'w-305': 'rain',
                            'w-302': 'rain',
                            'w-299': 'rain',
                            'w-296': 'sleet',
                            'w-293': 'sleet',
                            'w-284': 'partly-cloudy-day',
                            'w-281': 'partly-cloudy-day',
                            'w-266': 'sleet',
                            'w-263': 'sleet',
                            'w-260': 'fog',
                            'w-248': 'fog',
                            'w-230': 'snow',
                            'w-227': 'snow',
                            'w-200': 'sleet',
                            'w-185': 'sleet',
                            'w-182': 'sleet',
                            'w-179': 'sleet',
                            'w-176': 'rain',
                            'w-143': 'fog',
                            'w-122': 'cloudy',
                            'w-119': 'cloudy',
                            'w-116': 'partly-cloudy-day',
                            'w-113': 'clear-day'
                        },
                        night: {
                            'w-395': 'snow',
                            'w-392': 'sleet',
                            'w-389': 'sleet',
                            'w-386': 'sleet',
                            'w-377': 'sleet',
                            'w-374': 'sleet',
                            'w-371': 'partly-cloudy-night',
                            'w-368': 'snow',
                            'w-365': 'sleet',
                            'w-362': 'sleet',
                            'w-359': 'rain',
                            'w-356': 'rain',
                            'w-353': 'sleet',
                            'w-350': 'sleet',
                            'w-338': 'partly-cloudy-night',
                            'w-335': 'partly-cloudy-night',
                            'w-332': 'partly-cloudy-night',
                            'w-329': 'partly-cloudy-night',
                            'w-326': 'snow',
                            'w-323': 'snow',
                            'w-320': 'neve',
                            'w-317': 'partly-cloudy-night',
                            'w-314': 'partly-cloudy-night',
                            'w-311': 'partly-cloudy-night',
                            'w-308': 'rain',
                            'w-305': 'rain',
                            'w-302': 'rain',
                            'w-299': 'rain',
                            'w-296': 'sleet',
                            'w-293': 'sleet',
                            'w-284': 'partly-cloudy-night',
                            'w-281': 'partly-cloudy-night',
                            'w-266': 'sleet',
                            'w-263': 'sleet',
                            'w-260': 'fog',
                            'w-248': 'fog',
                            'w-230': 'snow',
                            'w-227': 'snow',
                            'w-200': 'sleet',
                            'w-185': 'sleet',
                            'w-182': 'sleet',
                            'w-179': 'sleet',
                            'w-176': 'rain',
                            'w-143': 'fog',
                            'w-122': 'cloudy',
                            'w-119': 'cloudy',
                            'w-116': 'partly-cloudy-night',
                            'w-113': 'clear-night'
                        }
                    },
                    before: function (el, options) {
                        el.html('<div class="loading"></div>');
                    },
                    after: function (el, options) {
                        if ($(".next-days", el).length) {
                            $(".next-days", el).delay(500).toggle("fast");
                        }
                    },
                    success: function (el, data, options) {
                        data.data.current_condition[0].temp = options.typeTemp.toLowerCase() == "c" ?
                                                                    data.data.current_condition[0].temp_C :
                                                                    data.data.current_condition[0].temp_F;

                        data.data.current_condition[0].dayOrNight = "day";

                        if (options.dayAndNight) {
                            var lodt = new String(data.data.current_condition[0].localObsDateTime).split(' ');
                            data.data.current_condition[0].dayOrNight = isDay(lodt[1] + ' ' + lodt[2]) ? "day" : "night";
                        }

                        data.data.current_condition[0].observation_time = Mustache.render(
                            options.updateDateFormat,
                            getUpdateDate(data.data.current_condition[0].observation_time)
                        );

                        var h = data.data.weather[0].hourly;

                        data.data.weather = [];

                        var weather = {
                            "day": options.day,
                            "max": options.max,
                            "min": options.min,
                            "typeTemp": options.typeTemp,
                            'desc': data.data.current_condition[0].lang_pt[0].value,

                            "currentCondition": options.typeTemp.toLowerCase() == "c" ? data.data.current_condition[0].temp_C : data.data.current_condition[0].temp_F,
                            "currentWeatherIcon": data.data.current_condition[0].dayOrNight == "night" ?
                                                        options.icons.night["w-" + data.data.current_condition[0].weatherCode] :
                                                        options.icons.day["w-" + data.data.current_condition[0].weatherCode],
                            /*
                            "city": data.data.nearest_area[0].areaName[0].value,
                            "country": data.data.nearest_area[0].country[0].value,
                            */
                            "nextDays": (options.days > 0 ? data.data.weather : null)
                        };

                        var saida = options.templates;
                        for (var k in weather) {
                            saida = saida.replace('#' + k + '#', weather[k]);
                        }

                        for (var i = 0; i < h.length; i++) {
                            var hr = $.strPad(h[i].time, 4).substring(0, 2);
                            var hrAmPm = (hr == '00' ? '12' : (hr < 12 ? hr : (hr - 12))) + ':00 ' + (hr == '00' ? 'AM' : (hr < 12 ? 'AM' : (hr - 12) + 'PM'))

                            hr = (hr == '00' ? '12 AM' : (hr < 12 ? hr + " AM" : (hr - 12) + " PM"));

                            var nxt = {
                                dayWeatherIcon: isDay(hrAmPm) ? options.icons.day["w-" + h[i].weatherCode] : options.icons.night["w-" + h[i].weatherCode],

                                hour: hr,

                                tempMax: options.typeTemp.toLowerCase() == "c" ?
                                                                h[i].tempC :
                                                                h[i].tempF,

                                humidity: h[i].humidity,

                                desc: h[i].lang_pt[0].value
                            };

                            var saidaNext = options.tplNextdays;
                            for (var k in nxt) {
                                saidaNext = saidaNext.replace('#' + k + '#', nxt[k]);
                            }

                            saida += saidaNext;
                        }

                        if (window.localStorage && options.refresh > 0) {
                            localStorage.setItem(options.id ? options.id : options.city, JSON.stringify(weather));
                            localStorage.setItem((options.id ? options.id : options.city) + "-time", new Date().getTime() + (options.refresh * 1000));
                        }

                        $(el).replaceWith(saida);

                        $("[data-skycon]").each(function () {
                            try
                            {
                                var e = $(this);
                                var t = new Skycons({ color: e.attr('data-skycolor') });
                                e.html('<canvas width="' + e.attr('data-skywidth') + '" height="' + e.attr('data-skyheight') + '"></canvas>');
                                t.add(e.children()[0], e.attr('data-skycon'));
                                t.play();
                            }
                            catch (e)
                            {
                                console.log(e.message);
                            }
                        });

                    },
                    fail: function (el, options) {
                        el.html('<div class="error"><span>' + options.msgError + '</span></div>');
                    }
                };

                var getWeather = function () {
                    var el = $this;

                    var needRefresh = window.localStorage && options.refresh > 0 ?
                                        (new Date().getTime() > window.localStorage.getItem((options.id ? options.id : options.city) + "-time") ? true : false)
                                        : true;

                        options.before(el);
                        $.ajax({
                            url: 'http://api.worldweatheronline.com/free/v2/weather.ashx?q=' + options.latitude + ',' + options.longitude,
                            type: 'GET',
                            data: {
                                lang: 'pt',
                                fx24: 'no',
                                format: 'json',
                                num_of_days: options.days,
                                key: 'b5f218783f745ffc96459a24fd668',
                                showlocaltime: true,
                                extra: 'localObsTime',
                            },
                            dataType: 'json',
                            async: options.async,
                            beforeSend: options.before(el, options)
                        }).done(function (response) {
                            if (response.data.error) {
                                options.msgError = response.data.error[0].msg;

                                options.fail(el, options);
                            } else {
                                options.success(el, response, options);
                            }
                        }).fail(function (options) {
                            options.fail(el, options);
                        });
                    
                };

                /** 
                 * The getLocation function si called by the Geolocation API
                 * @param postion is a Geolocation object
                 */
                var getLocation = function (position) {
                    options.latitude = position.coords.latitude;
                    options.longitude = position.coords.longitude;

                    getWeather();
                };
                /**
                 * This function is called if the geolocation fail
                 * @param error contains the error's message
                 */
                var errorGetLocation = function (error) {
                    var info = "Error during the geolocation : ";

                    switch (error.code) {
                        case error.TIMEOUT:
                            info += "Timeout !";
                            break;
                        case error.PERMISSION_DENIED:
                            info += "You have not given permission";
                            break;
                        case error.POSITION_UNAVAILABLE:
                            info += "The position could not be determined";
                            break;
                        case error.UNKNOWN_ERROR:
                            info += "Unknown error";
                            break;
                    }
                    options.ip = true;

                    getWeather();
                };
                /**
                 * getDate function get a date and parses it
                 * @param date a string 
                 * @return a JSON object
                 */
                var getDate = function (date) {
                    var d = new Date(date);
                    if (date) {
                        tmp = date.split(/[^0-9]/);

                        for (var i = 0; i < 5; i++) {
                            tmp[i] = tmp[i] != undefined ? tmp[i] : "00";
                        }
                        d = new Date(tmp[0], tmp[1] - 1, tmp[2], tmp[3], tmp[4]);
                    }
                    parse = {
                        "a": "" + (d.getHours() > 12 ? "pm" : "am"),
                        "A": "" + (d.getHours() > 12 ? "PM" : "AM"),
                        "g": "" + (d.getHours() > 12 ? d.getHours() - 12 : d.getHours()),
                        "gg": "" + (d.getHours() < 10 ? "0" + d.getHours() : (d.getHours() > 12 ? d.getHours() - 12 : d.getHours())),
                        "h": "" + (d.getHours()),
                        "hh": "" + (d.getHours() < 10 ? "0" + d.getHours() : d.getHours()),
                        "i": "" + (d.getMinutes()),
                        "ii": "" + (d.getMinutes() < 10 ? "0" + d.getMinutes() : d.getMinutes()),
                        "s": "" + (d.getSeconds()),
                        "ss": "" + (d.getSeconds() < 10 ? "0" + d.getSeconds() : d.getSeconds()),
                        "d": "" + (d.getDate()),
                        "dd": "" + (d.getDate() < 10 ? "0" + d.getDate() : d.getDate()),
                        "m": "" + (d.getMonth() + 1),
                        "mm": "" + (d.getMonth() < 9 ? "0" + (d.getMonth() + 1) : d.getMonth() + 1),
                        "y": "" + (d.getYear() - 100),
                        "yy": "" + (d.getFullYear()),
                        "DD": options.weekDays[d.getDay()],
                        "D": options.weekDays[d.getDay()].substring(0, 3),
                        "MM": options.months[d.getMonth()],
                        "M": options.months[d.getMonth()].substring(0, 3)
                    };
                    return parse;
                };
                /**
                 * getUpdateDate get te update date and parses it
                 * @param date a string
                 */
                var getUpdateDate = function (date) {
                    var tmp = date.split(" ");
                    var time = tmp[1].split(":");

                    if (tmp[2] == "PM") {
                        time[0] = time[0] == 12 ? time[0] : parseInt(time[0]) + 12;
                    }
                    return getDate(tmp[0] + "T" + time.join(":"));
                };
                /**
                 * setDefaults function set the default settings
                 * @param settings JSON object
                 */
                var setDefaults = function (settings) {
                    $.extend(options, settings);
                    return this;
                };
                setDefaults(settings || {});

                if (navigator.geolocation && options.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) { getLocation(position) }, function (error) { errorGetLocation(error) });
                } else {
                    getWeather();
                }
            };

            return this.each(function () {
                new WhatWeather(settings);
                return this;
            });
        }
    });
})(jQuery);


!function (t) { "use strict"; function n(t, n, i, e) { t.beginPath(), t.arc(n, i, e, 0, p, !1), t.fill() } function i(t, n, i, e, a) { t.beginPath(), t.moveTo(n, i), t.lineTo(e, a), t.stroke() } function e(t, i, e, a, o, r, l, s) { var h = Math.cos(i * p), c = Math.sin(i * p); s -= l, n(t, e - c * o, a + h * r + .5 * s, l + (1 - .5 * h) * s) } function a(t, n, i, a, o, r, l, s) { var h; for (h = 5; h--;) e(t, n + h / 5, i, a, o, r, l, s) } function o(t, n, i, e, o, r, l) { n /= 3e4; var s = .21 * o, h = .12 * o, c = .24 * o, u = .28 * o; t.fillStyle = l, a(t, n, i, e, s, h, c, u), t.globalCompositeOperation = "destination-out", a(t, n, i, e, s, h, c - r, u - r), t.globalCompositeOperation = "source-over" } function r(t, n, e, a, o, r, l) { n /= 12e4; var s, h, c, u, f = .25 * o - .5 * r, v = .32 * o + .5 * r, d = .5 * o - .5 * r; for (t.strokeStyle = l, t.lineWidth = r, t.lineCap = "round", t.lineJoin = "round", t.beginPath(), t.arc(e, a, f, 0, p, !1), t.stroke(), s = 8; s--;) h = (n + s / 8) * p, c = Math.cos(h), u = Math.sin(h), i(t, e + c * v, a + u * v, e + c * d, a + u * d) } function l(t, n, i, e, a, o, r) { n /= 15e3; var l = .29 * a - .5 * o, s = .05 * a, h = Math.cos(n * p), c = h * p / -16; t.strokeStyle = r, t.lineWidth = o, t.lineCap = "round", t.lineJoin = "round", i += h * s, t.beginPath(), t.arc(i, e, l, c + p / 8, c + 7 * p / 8, !1), t.arc(i + Math.cos(c) * l * C, e + Math.sin(c) * l * C, l, c + 5 * p / 8, c + 3 * p / 8, !0), t.closePath(), t.stroke() } function s(t, n, i, e, a, o, r) { n /= 1350; var l, s, h, c, u = .16 * a, f = 11 * p / 12, v = 7 * p / 12; for (t.fillStyle = r, l = 4; l--;) s = (n + l / 4) % 1, h = i + (l - 1.5) / 1.5 * (1 === l || 2 === l ? -1 : 1) * u, c = e + s * s * a, t.beginPath(), t.moveTo(h, c - 1.5 * o), t.arc(h, c, .75 * o, f, v, !1), t.fill() } function h(t, n, e, a, o, r, l) { n /= 750; var s, h, c, u, f = .1875 * o; for (t.strokeStyle = l, t.lineWidth = .5 * r, t.lineCap = "round", t.lineJoin = "round", s = 4; s--;) h = (n + s / 4) % 1, c = Math.floor(e + (s - 1.5) / 1.5 * (1 === s || 2 === s ? -1 : 1) * f) + .5, u = a + h * o, i(t, c, u - 1.5 * r, c, u + 1.5 * r) } function c(t, n, e, a, o, r, l) { n /= 3e3; var s, h, c, u, f = .16 * o, v = .75 * r, d = n * p * .7, m = Math.cos(d) * v, g = Math.sin(d) * v, M = d + p / 3, C = Math.cos(M) * v, w = Math.sin(M) * v, y = d + 2 * p / 3, b = Math.cos(y) * v, k = Math.sin(y) * v; for (t.strokeStyle = l, t.lineWidth = .5 * r, t.lineCap = "round", t.lineJoin = "round", s = 4; s--;) h = (n + s / 4) % 1, c = e + Math.sin((h + s / 4) * p) * f, u = a + h * o, i(t, c - m, u - g, c + m, u + g), i(t, c - C, u - w, c + C, u + w), i(t, c - b, u - k, c + b, u + k) } function u(t, n, i, e, o, r, l) { n /= 3e4; var s = .21 * o, h = .06 * o, c = .21 * o, u = .28 * o; t.fillStyle = l, a(t, n, i, e, s, h, c, u), t.globalCompositeOperation = "destination-out", a(t, n, i, e, s, h, c - r, u - r), t.globalCompositeOperation = "source-over" } function f(t, n, i, e, a, o, r) { var l = a / 8, s = l / 3, h = 2 * s, c = n % 1 * p, u = Math.cos(c), f = Math.sin(c); t.fillStyle = r, t.strokeStyle = r, t.lineWidth = o, t.lineCap = "round", t.lineJoin = "round", t.beginPath(), t.arc(i, e, l, c, c + Math.PI, !1), t.arc(i - s * u, e - s * f, h, c + Math.PI, c, !1), t.arc(i + h * u, e + h * f, s, c + Math.PI, c, !0), t.globalCompositeOperation = "destination-out", t.fill(), t.globalCompositeOperation = "source-over", t.stroke() } function v(t, n, i, e, a, o, r, l, s) { n /= 2500; var h, c, u, v, d = w[r], m = (n + r - y[r].start) % l, g = (n + r - y[r].end) % l, M = (n + r) % l; if (t.strokeStyle = s, t.lineWidth = o, t.lineCap = "round", t.lineJoin = "round", 1 > m) { if (t.beginPath(), m *= d.length / 2 - 1, h = Math.floor(m), m -= h, h *= 2, h += 2, t.moveTo(i + (d[h - 2] * (1 - m) + d[h] * m) * a, e + (d[h - 1] * (1 - m) + d[h + 1] * m) * a), 1 > g) { for (g *= d.length / 2 - 1, c = Math.floor(g), g -= c, c *= 2, c += 2, v = h; v !== c; v += 2) t.lineTo(i + d[v] * a, e + d[v + 1] * a); t.lineTo(i + (d[c - 2] * (1 - g) + d[c] * g) * a, e + (d[c - 1] * (1 - g) + d[c + 1] * g) * a) } else for (v = h; v !== d.length; v += 2) t.lineTo(i + d[v] * a, e + d[v + 1] * a); t.stroke() } else if (1 > g) { for (t.beginPath(), g *= d.length / 2 - 1, c = Math.floor(g), g -= c, c *= 2, c += 2, t.moveTo(i + d[0] * a, e + d[1] * a), v = 2; v !== c; v += 2) t.lineTo(i + d[v] * a, e + d[v + 1] * a); t.lineTo(i + (d[c - 2] * (1 - g) + d[c] * g) * a, e + (d[c - 1] * (1 - g) + d[c + 1] * g) * a), t.stroke() } 1 > M && (M *= d.length / 2 - 1, u = Math.floor(M), M -= u, u *= 2, u += 2, f(t, n, i + (d[u - 2] * (1 - M) + d[u] * M) * a, e + (d[u - 1] * (1 - M) + d[u + 1] * M) * a, a, o, s)) } var d, m; !function () { var n = t.requestAnimationFrame || t.webkitRequestAnimationFrame || t.mozRequestAnimationFrame || t.oRequestAnimationFrame || t.msRequestAnimationFrame, i = t.cancelAnimationFrame || t.webkitCancelAnimationFrame || t.mozCancelAnimationFrame || t.oCancelAnimationFrame || t.msCancelAnimationFrame; n && i ? (d = function (t, i) { function e() { a.value = n(e), t() } var a = { value: null }; return e(), a }, m = function (t) { i(t.value) }) : (d = setInterval, m = clearInterval) }(); var g = 500, M = .08, p = 2 * Math.PI, C = 2 / Math.sqrt(2), w = [[-.75, -.18, -.7219, -.1527, -.6971, -.1225, -.6739, -.091, -.6516, -.0588, -.6298, -.0262, -.6083, .0065, -.5868, .0396, -.5643, .0731, -.5372, .1041, -.5033, .1259, -.4662, .1406, -.4275, .1493, -.3881, .153, -.3487, .1526, -.3095, .1488, -.2708, .1421, -.2319, .1342, -.1943, .1217, -.16, .1025, -.129, .0785, -.1012, .0509, -.0764, .0206, -.0547, -.012, -.0378, -.0472, -.0324, -.0857, -.0389, -.1241, -.0546, -.1599, -.0814, -.1876, -.1193, -.1964, -.1582, -.1935, -.1931, -.1769, -.2157, -.1453, -.229, -.1085, -.2327, -.0697, -.224, -.0317, -.2064, .0033, -.1853, .0362, -.1613, .0672, -.135, .0961, -.1051, .1213, -.0706, .1397, -.0332, .1512, .0053, .158, .0442, .1624, .0833, .1636, .1224, .1615, .1613, .1565, .1999, .15, .2378, .1402, .2749, .1279, .3118, .1147, .3487, .1015, .3858, .0892, .4236, .0787, .4621, .0715, .5012, .0702, .5398, .0766, .5768, .089, .6123, .1055, .6466, .1244, .6805, .144, .7147, .163, .75, .18], [-.75, 0, -.7033, .0195, -.6569, .0399, -.6104, .06, -.5634, .0789, -.5155, .0954, -.4667, .1089, -.4174, .1206, -.3676, .1299, -.3174, .1365, -.2669, .1398, -.2162, .1391, -.1658, .1347, -.1157, .1271, -.0661, .1169, -.017, .1046, .0316, .0903, .0791, .0728, .1259, .0534, .1723, .0331, .2188, .0129, .2656, -.0064, .3122, -.0263, .3586, -.0466, .4052, -.0665, .4525, -.0847, .5007, -.1002, .5497, -.113, .5991, -.124, .6491, -.1325, .6994, -.138, .75, -.14]], y = [{ start: .36, end: .11 }, { start: .56, end: .16 }], b = function (t) { this.list = [], this.interval = null, this.color = t && t.color ? t.color : "black", this.resizeClear = !(!t || !t.resizeClear) }; b.CLEAR_DAY = function (t, n, i) { var e = t.canvas.width, a = t.canvas.height, o = Math.min(e, a); r(t, n, .5 * e, .5 * a, o, o * M, i) }, b.CLEAR_NIGHT = function (t, n, i) { var e = t.canvas.width, a = t.canvas.height, o = Math.min(e, a); l(t, n, .5 * e, .5 * a, o, o * M, i) }, b.PARTLY_CLOUDY_DAY = function (t, n, i) { var e = t.canvas.width, a = t.canvas.height, l = Math.min(e, a); r(t, n, .625 * e, .375 * a, .75 * l, l * M, i), o(t, n, .375 * e, .625 * a, .75 * l, l * M, i) }, b.PARTLY_CLOUDY_NIGHT = function (t, n, i) { var e = t.canvas.width, a = t.canvas.height, r = Math.min(e, a); l(t, n, .667 * e, .375 * a, .75 * r, r * M, i), o(t, n, .375 * e, .625 * a, .75 * r, r * M, i) }, b.CLOUDY = function (t, n, i) { var e = t.canvas.width, a = t.canvas.height, r = Math.min(e, a); o(t, n, .5 * e, .5 * a, r, r * M, i) }, b.RAIN = function (t, n, i) { var e = t.canvas.width, a = t.canvas.height, r = Math.min(e, a); s(t, n, .5 * e, .37 * a, .9 * r, r * M, i), o(t, n, .5 * e, .37 * a, .9 * r, r * M, i) }, b.SLEET = function (t, n, i) { var e = t.canvas.width, a = t.canvas.height, r = Math.min(e, a); h(t, n, .5 * e, .37 * a, .9 * r, r * M, i), o(t, n, .5 * e, .37 * a, .9 * r, r * M, i) }, b.SNOW = function (t, n, i) { var e = t.canvas.width, a = t.canvas.height, r = Math.min(e, a); c(t, n, .5 * e, .37 * a, .9 * r, r * M, i), o(t, n, .5 * e, .37 * a, .9 * r, r * M, i) }, b.WIND = function (t, n, i) { var e = t.canvas.width, a = t.canvas.height, o = Math.min(e, a); v(t, n, .5 * e, .5 * a, o, o * M, 0, 2, i), v(t, n, .5 * e, .5 * a, o, o * M, 1, 2, i) }, b.FOG = function (t, n, e) { var a = t.canvas.width, o = t.canvas.height, r = Math.min(a, o), l = r * M; u(t, n, .5 * a, .32 * o, .75 * r, l, e), n /= 5e3; var s = Math.cos(n * p) * r * .02, h = Math.cos((n + .25) * p) * r * .02, c = Math.cos((n + .5) * p) * r * .02, f = Math.cos((n + .75) * p) * r * .02, v = .936 * o, d = Math.floor(v - .5 * l) + .5, m = Math.floor(v - 2.5 * l) + .5; t.strokeStyle = e, t.lineWidth = l, t.lineCap = "round", t.lineJoin = "round", i(t, s + .2 * a + .5 * l, d, h + .8 * a - .5 * l, d), i(t, c + .2 * a + .5 * l, m, f + .8 * a - .5 * l, m) }, b.prototype = { _determineDrawingFunction: function (t) { return "string" == typeof t && (t = b[t.toUpperCase().replace(/-/g, "_")] || null), t }, add: function (t, n) { var i; "string" == typeof t && (t = document.getElementById(t)), null !== t && (n = this._determineDrawingFunction(n), "function" == typeof n && (i = { element: t, context: t.getContext("2d"), drawing: n }, this.list.push(i), this.draw(i, g))) }, set: function (t, n) { var i; for ("string" == typeof t && (t = document.getElementById(t)), i = this.list.length; i--;) if (this.list[i].element === t) return this.list[i].drawing = this._determineDrawingFunction(n), void this.draw(this.list[i], g); this.add(t, n) }, remove: function (t) { var n; for ("string" == typeof t && (t = document.getElementById(t)), n = this.list.length; n--;) if (this.list[n].element === t) return void this.list.splice(n, 1) }, draw: function (t, n) { var i = t.context.canvas; this.resizeClear ? i.width = i.width : t.context.clearRect(0, 0, i.width, i.height), t.drawing(t.context, n, this.color) }, play: function () { var t = this; this.pause(), this.interval = d(function () { var n, i = Date.now(); for (n = t.list.length; n--;) t.draw(t.list[n], i) }, 1e3 / 60) }, pause: function () { this.interval && (m(this.interval), this.interval = null) } }, t.Skycons = b }(this);